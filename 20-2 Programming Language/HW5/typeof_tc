DIV(ADD(CONST 1,CONST 3),CONST 0) 
PROC("f",PROC("x",ADD(CONST 1,CALL (VAR "f",VAR "x")))) 
LET("f",PROC("y",VAR "y"),LET("g",CALL(VAR "f",CONST 1),LET("h",CALL(VAR "f",CONST 2),VAR "g"))) 
LET("f",PROC("x",PROC("y",ADD(VAR "x",VAR "y"))),ADD(CALL (VAR "f",CONST 1),CONST 2)) 
LET("f",PROC("f",CALL(VAR "f",CONST 11)),LET("g",PROC("g",ADD(VAR "g",CONST 10)),PROC("c",ADD(CALL(VAR "f",VAR "g"),VAR "c")))) 
LET("modular",PROC("x",PROC("y",SUB(VAR "x",MUL(VAR "y",DIV(VAR "x",VAR "y"))))),CALL(VAR "modular",CONST 10)) 
LET("x",CONST 10,LET("y",EQUAL (VAR "x", CONST 0),ADD (VAR "x",VAR "y"))) 
LET("x",CONST 10,IF(EQUAL (VAR "x", CONST 0),ADD(VAR "x",CONST 1),IF(EQUAL (ADD(VAR "x",CONST 1), CONST 0),VAR "x",CONST 0))) 
PROC("x",PROC("y",EQUAL(VAR "x", CONST 0))) 
LETREC("f","x",PROC("y",IF(EQUAL (VAR "y", CONST 0),CONST 1,CALL (VAR "f",VAR "y"))),CALL(CALL (VAR "f",CONST 1),CONST 0)) 
LET("x",CONST 1,LETREC("f","x",IF(EQUAL (VAR "x", CONST 0),CONST 1,CONST 2),VAR "x")) 
LETREC("f","x",PROC("y",IF(EQUAL (VAR "x", CONST 0),CONST 0,DIV(VAR "x",VAR "y"))),CALL(CALL(VAR "f",CONST 1),CONST 1)) 
LETREC("bin2dec","bin",PROC("depth",IF(EQUAL(VAR "bin", CONST 0),CONST 0,LET("remainder",SUB(VAR "bin",MUL(DIV(VAR "bin",CONST 10),CONST 10)),ADD(MUL(VAR "remainder",VAR "depth"),CALL(CALL(VAR "bin2dec",DIV(VAR "bin",CONST 10)),MUL(VAR "depth",CONST 2)))))),VAR "bin2dec") 
IF (EQUAL (CONST 10, CONST 0),CONST 1,EQUAL (CONST 20, CONST 0)) 
LET ("id", PROC ("x", VAR "x"), EQUAL (VAR "id", VAR "id")) 
LETREC ("range", "x", IF (LESS (VAR "x", CONST 1), NIL, LET ("x", SUB (VAR "x", CONST 1), CONS (VAR "x", CALL (VAR "range", VAR "x")))), VAR "range") 
APPEND (CONS (CONST 1, NIL), NIL) 
APPEND (CONS (CONST 1, NIL), TAIL (CONS (TRUE, NIL))) 
LETMREC (("f", "n", IF (LESS (CONST 0, VAR "n"), ADD (CALL (VAR "f", SUB (VAR "n", CONST 1)), MUL (VAR "n", CALL (VAR "g", VAR "n"))), CONST 0)), ("g", "n", IF (LESS (CONST 0, VAR "n"), ADD (CONST 1, CALL (VAR "f", SUB (VAR "n", CONST 1))), CONST 1)), VAR "f") 
CONS (CONS (CONS (NIL, NIL), NIL), NIL) 
LETMREC (("male", "x", IF (EQUAL (VAR ("x"), CONST 0), CONST 0, SUB (VAR ("x"), CALL (VAR ("female"), CALL (VAR ("male"), SUB (VAR ("x"), CONST 1)))))), ("female", "x", IF (EQUAL (VAR ("x"), CONST 0), CONST 1, SUB (VAR ("x"), CALL (VAR ("male"), CALL (VAR ("female"), SUB (VAR ("x"), CONST 1)))))), LETREC ("range"    , "n", IF (EQUAL (VAR ("n"), CONST 0), CONS (CONST 0, NIL), CONS (VAR ("n"), CALL (VAR ("range"), SUB (VAR ("n"), CONST 1)))), LETREC ("male_sequence", "l", IF (ISNIL (VAR ("l")), NIL, CONS (CALL (VAR ("male"), HEAD (VAR ("l"))), CALL (VAR ("male_sequence"), TAIL (VAR ("l"))))), CALL (VAR ("male_sequence"), CALL (VAR ("range"), CONST 5))))) 
LETREC ("concat", "lst", IF (ISNIL (VAR "lst"), NIL, APPEND (HEAD (VAR "lst"), CALL (VAR "concat", TAIL (VAR "lst")))), CALL (VAR "concat", CONS (CONS (CONST 1, CONS (CONST 2, NIL)), CONS (CONS (CONST 3, CONS (CONST 4, CONS (CONST 5, NIL))), NIL)))) 
LETREC ("iter", "n", PROC ("f", IF (EQUAL (VAR "n", CONST 0), PROC("x", VAR "x"), PROC ("x", CALL (CALL (CALL (VAR "iter", SUB (VAR "n", CONST 1)), VAR "f"), CALL (VAR "f", VAR "x"))))), VAR "iter") 
PROC ("a", PROC ("b", PROC ("c", EQUAL (ADD (MUL (VAR "a", VAR "a"), MUL (VAR "b", VAR "b")), MUL (VAR "c", VAR "c"))))) 
LETREC ("drop", "f", PROC ("lst", IF (ISNIL (VAR "lst"), NIL, IF (CALL (VAR "f", HEAD (VAR "lst")), CALL (CALL (VAR "drop", VAR "f"), TAIL(VAR "lst")), VAR "lst"))), LET ("t", CALL (CALL (VAR "drop", PROC ("x", LESS (CONST 5, VAR "x"))), CONS (CONST 1, CONS (CONST 3, CONS (CONST 7, NIL)))), VAR "drop")) 
LETREC ("drop", "f", PROC ("lst", IF (ISNIL (VAR "lst"), NIL, IF (CALL (VAR "f", HEAD (VAR "lst")), CALL (CALL (VAR "drop", VAR "f"), TAIL(VAR "lst")), VAR "lst"))), LET ("t", CALL (CALL (VAR "drop", PROC ("x", VAR "x")), CONS (TRUE, CONS (FALSE, CONS (FALSE, NIL)))), VAR "drop")) 
LETREC ("drop", "f", PROC ("lst", IF (ISNIL (VAR "lst"), NIL, IF (CALL (VAR "f", HEAD (VAR "lst")), CALL (CALL (VAR "drop", VAR "f"), TAIL(VAR "lst")), VAR "lst"))), LET ("t", CALL (CALL (VAR "drop", PROC ("x", VAR "x")), CONS (TRUE, CONS (FALSE, CONS (FALSE, NIL)))), CALL (CALL (VAR "drop", PROC ("x", LESS (CONST 5, VAR "x"))), CONS (CONST 1, CONS (CONST 3, CONS (CONST 7, NIL)))))) 
LET ("id", PROC ("x", VAR "x"), SEQ (CALL (VAR "id", CONS (CONST 1, NIL)), CALL (VAR "id", NIL))) 
LETMREC (("f", "x", NOT (VAR "x")), ("g", "y", ADD (VAR "y", CONST 1)), VAR "f") 
LETMREC (("f", "x", NOT (VAR "x")), ("g", "y", ADD (VAR "y", CONST 1)), VAR "g") 
LETMREC (("f", "x", VAR "x"), ("g", "y", IF(CALL (VAR "f", VAR "y"), CALL (VAR "f", CONST 1), CALL (VAR "f", CONST 2))), VAR "f") 
LET ("fact2", PROC ("n", LETMREC(("factodd", "x", IF (EQUAL (VAR "x", CONST 1), CONST 1, MUL (VAR "x", CALL (VAR "facteven", SUB (VAR "x", CONST 1))))), ("facteven", "x", IF (EQUAL (VAR "x", CONST 0), CONST 1, MUL (VAR "x", CALL (VAR "factodd", SUB (VAR "x", CONST 1))))), IF (EQUAL (VAR "n", MUL (CONST 2, DIV (VAR "n", CONST 2))), CALL (VAR "facteven", VAR "n"), CALL (VAR "factodd", VAR "n")))), VAR "fact2") 
LET ("x", NIL, PRINT (VAR "x")) 
LET ("id", PROC ("x", VAR "x"), CALL (VAR "id", HEAD (NIL))) 
SEQ (EQUAL (TRUE, CONST 1), LET ("x", CONST 1, VAR "x")) 
SEQ (EQUAL (NIL, NIL), LET ("id", PROC ("x", VAR "x"), VAR "id")) 
LET ("l", NIL, SEQ (EQUAL (HEAD (VAR "l"), CONST 1), VAR "l")) 
LET ("f", PROC ("x", ADD (VAR "x", CONST 1)), LETMREC (("f", "x", NOT (VAR "x")), ("g", "y", NOT (CALL (VAR "f", VAR "y"))), PROC ("a", CALL (VAR "f", LESS (VAR "a", CONST 1))))) 
LET("f",PROC("y",VAR "y"),LET("g",CALL(VAR "f",CONST 1),LET("h",CALL(VAR "f",EQUAL(CONST 0, CONST 0)),VAR "g"))) 
