CONS(PROC("x", CONST 1), CONS(PROC("x", EQUAL(VAR "x", CONST 1)), NIL))
EQUAL(PROC("x", VAR "x"), PROC("x", VAR "x"))

LET("x", PROC("a", VAR "a"), LET("y", PROC("b", VAR "b"), SEQ( EQUAL( CALL(VAR "x", HEAD(NIL)), CALL(VAR "y", HEAD(NIL))), CALL(VAR "x", TRUE))))
->TyBool

LET ("x", HEAD NIL, (EQUAL (VAR "x", CONST 12)))

LET ("x", HEAD NIL, EQUAL(SUB(VAR "x", CONST 12), HEAD NIL))
-> TyBool

EQUAL(NIL, NIL)
-> TyError
EQUAL(HEAD NIL, HEAD NIL)
-> TyBool

typeof (LESS(CONST 1, TRUE))
-> TypeError
typeof (LESS(CONST 1, HEAD NIL))
-> TyBool

LETMREC(
    ("f", "x", IF(EQUAL(VAR "x", CONST 0), CALL(VAR "f", CONST 0), CALL(VAR "g", EQUAL(VAR "x", CONST 1)))), 
    ("g", "x", IF(VAR "x", CONST 100, CALL(VAR "f", CONST 0))), 
    CALL(VAR "f", CONST 1))
-> TyInt
(*
let rec f x = if x = 0 then 0 else g(x = 1)
and g x = if x then 100 else f 0 in
f 1
*)

SEQ(PROC("x", VAR "x"), PROC("x", VAR "x"))